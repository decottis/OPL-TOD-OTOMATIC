package myToolWindow;

import Util.FileManager;
import Util.MyTable;
import Util.MyTree;
import Util.Todo;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.*;
import com.intellij.ui.components.JBScrollPane;
import com.intellij.ui.content.*;
import com.intellij.ui.table.JBTable;
import com.intellij.ui.treeStructure.Tree;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.NotNull;
import java.io.FileOutputStream;
import java.io.PrintStream;
import javax.swing.*;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;

public class MyToolWindowFactory implements ToolWindowFactory, TreeSelectionListener {

    // UI elements
    private JButton refreshToolWindowButton;
    private JButton hideToolWindowButton;
    private JLabel currentDate;
    private JLabel currentTime;
    private JLabel timeZone;
    private JPanel myToolWindowContent;
    private JTree tree1;
    private JTable table1;
    private JButton button1;
    private ToolWindow myToolWindow;

    // Utils
    public static List<File> listOfFiles;
    private Tree filesInConnection;
    private FileManager fm;
    private static MyTree myTree;
    public String test = "";
    public Project project;

    //cheat
    public static String[] columnNames = {"Tag", "File", "line", "content"};

    public MyToolWindowFactory() {
        listOfFiles = new ArrayList<File>();
        fm = new FileManager();
        myTree = new MyTree(new MyTable());
        button1 = new JButton("refresh");
        $$$setupUI$$$();
        button1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                listOfFiles.clear();
                myTree.getListOfTodo().clear();
                fm.getAllFiles(new File(project.getBasePath()));
                fm.getAllTag();
                myTree.refreshTree(tree1);
                tree1.setModel(myTree.getTreeModel());
            }

        });

    }

    // Create the tool window content.
    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
        this.project = project;
        listOfFiles.clear();
        myTree.getListOfTodo().clear();
        fm.getAllFiles(new File(project.getBasePath()));
        fm.getAllTag();

        // create my tree
        tree1 = myTree.refreshTree(tree1);
        table1.setModel(myTree.table.refreshTable(myTree.table.data, columnNames));

        $$$setupUI$$$();

        ContentFactory contentFactory = ContentFactory.SERVICE.getInstance();

        //create content panel
        Content content = contentFactory.createContent(myToolWindowContent, "", false);
        toolWindow.getContentManager().addContent(content, 0);
        myTree.addFactory(this);

    }

    public void valueChanged(TreeSelectionEvent e) {
    }

    public void createUIComponents() {
        //create my tree
        if (myTree == null)
            myTree = new MyTree(new MyTable());
        myTree.addFactory(this);
        if (tree1 != null)
            tree1 = myTree.refreshTree(tree1);
        if (table1 != null)
            table1.setModel(myTree.table.refreshTable(myTree.table.data, columnNames));
        else {
            tree1 = new Tree();
            table1 = new JTable();
        }
        if (myTree.table.tab != null)
            table1.setTableHeader(myTree.table.tab.getTableHeader());
    }

    public static MyTree getMyTree() {
        return myTree;
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        myToolWindowContent = new JPanel();
        myToolWindowContent.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setAutoscrolls(false);
        myToolWindowContent.add(scrollPane1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(2, -1), new Dimension(2, -1), null, 0, false));
        table1.setAutoCreateRowSorter(true);
        table1.setCellSelectionEnabled(false);
        table1.setColumnSelectionAllowed(false);
        table1.setRowSelectionAllowed(true);
        table1.setSurrendersFocusOnKeystroke(true);
        scrollPane1.setViewportView(table1);
        button1.setHorizontalAlignment(2);
        button1.setIcon(new ImageIcon(getClass().getResource("/myToolWindow/refresh.png")));
        button1.setText("");
        myToolWindowContent.add(button1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tree1.setBackground(new Color(-2312));
        tree1.setInheritsPopupMenu(true);
        myToolWindowContent.add(tree1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(25, 25), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return myToolWindowContent;
    }
}